facet_wrap(ext~pdensity)
library(tidyverse)
library(ape)
library(vegan)
library(ggraph)
library(tidygraph)
library(GGally)
setwd("~/bin/visuals/PFAMA1/coi/")
samples <- read_tsv("data/pfama1_sampInfo_678.tab")
sampleMeta <- read_tsv("data/prism2_finalMeta.tab")
haploDist <- read_tsv("seqData/aln_prism2.dist")
vcf <- read_tsv("seqData/aln_prism2.fasta.vcf")
# join samples with metaData
samples <- samples %>%
left_join(sampleMeta, by = c('s_Sample')) %>%
mutate(h_popUID = gsub('pfama1.','',h_popUID))
# haplotype dataframe to append flags to
haplotypes <- samples %>%
select(h_popUID) %>%
unique()
# add snp frequencies to each position
snpMatrix <- vcf[,-seq(1,9,1)] %>% as.matrix()
snpMatrix[snpMatrix > 0] <- 1
snpFreq <- snpMatrix %>%
rowSums() / dim(snpMatrix)[2]
vcf$snpFreq <- snpFreq
vcf$snpFreq %>% hist()
# Haplotype Read Counts
haploStats <- samples %>%
group_by(h_popUID) %>%
summarise(
readCount = sum(c_ReadCnt),
meanPC = mean(c_AveragedFrac)
) %>%
mutate(h_popUID = as.numeric(h_popUID))
haploMap <- samples %>%
select(h_popUID, cohortid, goodDate) %>%
mutate(h_popUID = as.numeric(h_popUID))
# hist of read counts
ggplot(haploStats,aes(x = as.numeric(h_popUID), y = log10(readCount))) +
geom_bar(stat = 'identity')
# Correlation of readcounts to mean haplotype percentage
ggplot(haploStats, aes(x = log10(readCount), y = log10(meanPC), fill = as.numeric(h_popUID))) +
geom_jitter(shape = 21, size = 3) +
scale_fill_gradient2()
## Function to return the unique snp-distance of the haplotypes
##  found in a patient~timepoint
sampleDateSnpDist <- function(sampledate, haploDist){
h_vec <- sampledate$h_popUID
col_hvec <- append(1,which(colnames(haploDist) %in% h_vec))
u_haploDist <- haploDist[col_hvec] %>%
filter(h_popUID %in% h_vec)
# u_haploDist[upper.tri(u_haploDist)] <- NaN
return(u_haploDist)
}
## Function to return a list of the subtibbles of unique patient~timepoints~haplotypes
unique_patient_timepoints <- function(samples){
# dataframe of all unique cohortid, goodDate combinations
groups <- samples %>%
select(cohortid, goodDate) %>%
unique()
# push unique haplotype groups into a list
groupList <- c()
for (i in 1:nrow(groups)){
index <- groups[i,]
t <- samples %>%
filter(cohortid == as.character(index[1,1]) & goodDate == as.character(index[1,2]))
u_snpDist = sampleDateSnpDist(t, haploDist)
groupList[[i]] <- u_snpDist
}
return(groupList)
}
## Function to return a vector of all haplotype distances found together
vec_upt <- function(subMatrices){
complete = c()
index <- 1
for (i in subMatrices){
if(length(i) <= 2) next
matList <- i[,-1] %>%
as.matrix() %>%
as.numeric() %>%
c()
complete[[index]] <- matList
index <- index + 1
}
return(unlist(complete))
}
subMatrices <- unique_patient_timepoints(samples)
vv <- vec_upt(subMatrices)
vv %>% hist()
haploDist[,-1] %>% as.matrix() %>% hist()
haplotypes <- samples %>%
unique() %>%
group_by(h_popUID) %>%
summarise(
n_timesFound = n(),
total_readCount = sum(c_ReadCnt),
mean_readCount = mean(c_ReadCnt),
mean_pc = mean(c_AveragedFrac)
) %>%
mutate(majorHaplotype = case_when(
mean_pc > 0.05 ~ TRUE,
TRUE ~ FALSE
)) %>%
right_join(haplotypes)
# add number of times each haplotype was found with another in person that is 1 snp off
pairedObservations <- data.frame(NA,NA)
colnames(pairedObservations) <- c('hap', 'hapList')
for(hap in haplotypes$h_popUID){
for (i in subMatrices){
if(hap %in% colnames(i)){
test <- i %>% filter(h_popUID == hap)
index <- which(test %in% 1) # search for values == 1
if (length(index) != 0 ){
hapList <- colnames(i)[index]
df <- data.frame(hap, hapList)
pairedObservations <- rbind(pairedObservations, df)
}
}
}
}
# add number of times found
PO <- pairedObservations %>%
filter(!is.na(hapList)) %>%
group_by(hap, hapList) %>%
summarise(num_patienttimepointpairs = n())
# plot the correlation of haplotypes found with each other
ggplot(PO, aes(x = hap, y = hapList)) +
geom_point(aes(size = num_patienttimepointpairs))
PO$hapList %>% table()
# for merging
colnames(PO)[1] <- 'h_popUID'
# merge haplotypes with the number of times each was found in person
haplotypes <- left_join(haplotypes, PO, by = c('h_popUID'))
haplotypes
# patient timepoint
ggplot(haplotypes %>% filter(!is.na(hapList)) , aes(x = h_popUID, y = hapList)) +
scale_fill_gradientn(colours = c('blue', 'firebrick4') ) +
# geom_curve(
#   aes(
#     x = hapList,
#     y = h_popUID,
#     xend = h_popUID,
#     yend = hapList
#     ),
#     colour = 'black'
#   ) +
geom_point(shape = 21, aes(size = mean_pc, fill = minFreq)) +
theme_classic()
ggsave('~/Pictures/hapSnps.pdf', g)
hapSnps <- vcf %>%
select(-CHROM, -ID, -REF, -ALT, -QUAL, -FILTER, -INFO, -FORMAT) %>%
gather(h_popUID, snpBool, -snpFreq, -POS) %>%
group_by(h_popUID, snpBool) %>%
summarise(minFreq = min(snpFreq)) %>%
filter(snpBool == 1) %>%
select(-snpBool)
haplotypes <- left_join(haplotypes, hapSnps, by = c('h_popUID'))
haplotypes %>%  plot()
# for easy merging
haploStats <- haploStats %>%
mutate(h_popUID = as.numeric(h_popUID))
# add minimum frequency to haplostats
haploStats <- haplotypes %>%
select(h_popUID, minFreq) %>%
mutate(h_popUID = as.numeric(h_popUID)) %>%
right_join(haploStats)
# prepare snp distance matrix for graph
hapgraph <- haploDist %>%
gather(h_popUID2, distance, `00`:`75`) %>%
mutate(h_popUID = as.numeric(h_popUID)) %>%
mutate(h_popUID2 = as.numeric(h_popUID2)) %>%
filter(h_popUID < h_popUID2)
# dply it all
hg <- as_tbl_graph(hapgraph) %>%
activate(nodes) %>%
mutate(h_popUID = as.numeric(name))  %>%
left_join(haploStats %>%  unique() , by = c('h_popUID')) %>%  # join stats into dataframe
activate(edges) %>%
filter(distance < 3) # set distance threshold
# plot constellation
ggraph(hg) +
geom_edge_fan(aes(width = as.factor(distance),  alpha = (1 / distance))) +
geom_node_label(aes(label = name), nudge_x = 0.25, nudge_y = 0.25, size = 2.5) +
geom_node_point(shape = 21 , aes(size = meanPC, fill = minFreq)) +
scale_edge_width_discrete(range = c(1,0.75)) +
theme_graph() +
scale_fill_gradientn(colours = c('peru', 'red', 'navy') %>% rev())
haploDist
haploDist %>%
select(`35`, `37`)
haploDist %>%
select(h_popUID,`35`, `37`)
haploDist %>%
select(h_popUID,`35`, `37`) %>%
filter(h_popUID == '35|37')
haploDist %>%
select(h_popUID,`35`, `37`) %>%
filter(h_popUID == '35' | h_popUID == '37')
haploDist %>%
select(h_popUID,`36`, `37`) %>%
filter(h_popUID == '36' | h_popUID == '37')
haplotypes <- samples %>%
unique() %>%
group_by(h_popUID) %>%
summarise(
n_timesFound = n(),
total_readCount = sum(c_ReadCnt),
mean_readCount = mean(c_ReadCnt),
mean_pc = mean(c_AveragedFrac),
sd_pc = sd(c_AveragedFrac),
) %>%
mutate(majorHaplotype = case_when(
mean_pc > 0.05 ~ TRUE,
TRUE ~ FALSE
)) %>%
right_join(haplotypes)
library(tidyverse)
library(ape)
library(vegan)
library(ggraph)
library(tidygraph)
library(GGally)
setwd("~/bin/visuals/PFAMA1/coi/")
samples <- read_tsv("data/pfama1_sampInfo_678.tab")
sampleMeta <- read_tsv("data/prism2_finalMeta.tab")
haploDist <- read_tsv("seqData/aln_prism2.dist")
vcf <- read_tsv("seqData/aln_prism2.fasta.vcf")
# join samples with metaData
samples <- samples %>%
left_join(sampleMeta, by = c('s_Sample')) %>%
mutate(h_popUID = gsub('pfama1.','',h_popUID))
# haplotype dataframe to append flags to
haplotypes <- samples %>%
select(h_popUID) %>%
unique()
# add snp frequencies to each position
snpMatrix <- vcf[,-seq(1,9,1)] %>% as.matrix()
snpMatrix[snpMatrix > 0] <- 1
snpFreq <- snpMatrix %>%
rowSums() / dim(snpMatrix)[2]
vcf$snpFreq <- snpFreq
vcf$snpFreq %>% hist()
# Haplotype Read Counts
haploStats <- samples %>%
group_by(h_popUID) %>%
summarise(
readCount = sum(c_ReadCnt),
meanPC = mean(c_AveragedFrac)
) %>%
mutate(h_popUID = as.numeric(h_popUID))
haploMap <- samples %>%
select(h_popUID, cohortid, goodDate) %>%
mutate(h_popUID = as.numeric(h_popUID))
# hist of read counts
ggplot(haploStats,aes(x = as.numeric(h_popUID), y = log10(readCount))) +
geom_bar(stat = 'identity')
# Correlation of readcounts to mean haplotype percentage
ggplot(haploStats, aes(x = log10(readCount), y = log10(meanPC), fill = as.numeric(h_popUID))) +
geom_jitter(shape = 21, size = 3) +
scale_fill_gradient2()
## Function to return the unique snp-distance of the haplotypes
##  found in a patient~timepoint
sampleDateSnpDist <- function(sampledate, haploDist){
h_vec <- sampledate$h_popUID
col_hvec <- append(1,which(colnames(haploDist) %in% h_vec))
u_haploDist <- haploDist[col_hvec] %>%
filter(h_popUID %in% h_vec)
# u_haploDist[upper.tri(u_haploDist)] <- NaN
return(u_haploDist)
}
## Function to return a list of the subtibbles of unique patient~timepoints~haplotypes
unique_patient_timepoints <- function(samples){
# dataframe of all unique cohortid, goodDate combinations
groups <- samples %>%
select(cohortid, goodDate) %>%
unique()
# push unique haplotype groups into a list
groupList <- c()
for (i in 1:nrow(groups)){
index <- groups[i,]
t <- samples %>%
filter(cohortid == as.character(index[1,1]) & goodDate == as.character(index[1,2]))
u_snpDist = sampleDateSnpDist(t, haploDist)
groupList[[i]] <- u_snpDist
}
return(groupList)
}
## Function to return a vector of all haplotype distances found together
vec_upt <- function(subMatrices){
complete = c()
index <- 1
for (i in subMatrices){
if(length(i) <= 2) next
matList <- i[,-1] %>%
as.matrix() %>%
as.numeric() %>%
c()
complete[[index]] <- matList
index <- index + 1
}
return(unlist(complete))
}
subMatrices <- unique_patient_timepoints(samples)
vv <- vec_upt(subMatrices)
vv %>% hist()
haploDist[,-1] %>% as.matrix() %>% hist()
haplotypes <- samples %>%
unique() %>%
group_by(h_popUID) %>%
summarise(
n_timesFound = n(),
total_readCount = sum(c_ReadCnt),
mean_readCount = mean(c_ReadCnt),
mean_pc = mean(c_AveragedFrac),
sd_pc = sd(c_AveragedFrac),
) %>%
mutate(majorHaplotype = case_when(
mean_pc > 0.05 ~ TRUE,
TRUE ~ FALSE
)) %>%
right_join(haplotypes)
# add number of times each haplotype was found with another in person that is 1 snp off
pairedObservations <- data.frame(NA,NA)
colnames(pairedObservations) <- c('hap', 'hapList')
for(hap in haplotypes$h_popUID){
for (i in subMatrices){
if(hap %in% colnames(i)){
test <- i %>% filter(h_popUID == hap)
index <- which(test %in% 1) # search for values == 1
if (length(index) != 0 ){
hapList <- colnames(i)[index]
df <- data.frame(hap, hapList)
pairedObservations <- rbind(pairedObservations, df)
}
}
}
}
# add number of times found
PO <- pairedObservations %>%
filter(!is.na(hapList)) %>%
group_by(hap, hapList) %>%
summarise(num_patienttimepointpairs = n())
# plot the correlation of haplotypes found with each other
ggplot(PO, aes(x = hap, y = hapList)) +
geom_point(aes(size = num_patienttimepointpairs))
PO$hapList %>% table()
# for merging
colnames(PO)[1] <- 'h_popUID'
# merge haplotypes with the number of times each was found in person
haplotypes <- left_join(haplotypes, PO, by = c('h_popUID'))
haplotypes
# patient timepoint
ggplot(haplotypes %>% filter(!is.na(hapList)) , aes(x = h_popUID, y = hapList)) +
scale_fill_gradientn(colours = c('blue', 'firebrick4') ) +
# geom_curve(
#   aes(
#     x = hapList,
#     y = h_popUID,
#     xend = h_popUID,
#     yend = hapList
#     ),
#     colour = 'black'
#   ) +
geom_point(shape = 21, aes(size = mean_pc, fill = minFreq)) +
theme_classic()
ggsave('~/Pictures/hapSnps.pdf', g)
hapSnps <- vcf %>%
select(-CHROM, -ID, -REF, -ALT, -QUAL, -FILTER, -INFO, -FORMAT) %>%
gather(h_popUID, snpBool, -snpFreq, -POS) %>%
group_by(h_popUID, snpBool) %>%
summarise(minFreq = min(snpFreq)) %>%
filter(snpBool == 1) %>%
select(-snpBool)
haplotypes <- left_join(haplotypes, hapSnps, by = c('h_popUID'))
haplotypes %>%  plot()
# for easy merging
haploStats <- haploStats %>%
mutate(h_popUID = as.numeric(h_popUID))
# add minimum frequency to haplostats
haploStats <- haplotypes %>%
select(h_popUID, minFreq) %>%
mutate(h_popUID = as.numeric(h_popUID)) %>%
right_join(haploStats)
# prepare snp distance matrix for graph
hapgraph <- haploDist %>%
gather(h_popUID2, distance, `00`:`75`) %>%
mutate(h_popUID = as.numeric(h_popUID)) %>%
mutate(h_popUID2 = as.numeric(h_popUID2)) %>%
filter(h_popUID < h_popUID2)
# dply it all
hg <- as_tbl_graph(hapgraph) %>%
activate(nodes) %>%
mutate(h_popUID = as.numeric(name))  %>%
left_join(haploStats %>%  unique() , by = c('h_popUID')) %>%  # join stats into dataframe
activate(edges) %>%
filter(distance < 3) # set distance threshold
# plot constellation
ggraph(hg) +
geom_edge_fan(aes(width = as.factor(distance),  alpha = (1 / distance))) +
geom_node_label(aes(label = name), nudge_x = 0.25, nudge_y = 0.25, size = 2.5) +
geom_node_point(shape = 21 , aes(size = meanPC, fill = minFreq)) +
scale_edge_width_discrete(range = c(1,0.75)) +
theme_graph() +
scale_fill_gradientn(colours = c('peru', 'red', 'navy') %>% rev())
haplotypes
ggplot(data = haplotypes, aes(x = mean_pc, y = h_popUID)) +
geom_errorbar()
ggplot(data = haplotypes, aes(x = mean_pc, y = h_popUID)) +
geom_errorbar(aes(ymin = mean_pc - sd_pc, ymax = mean_pc + sd_pc))
ggplot(data = haplotypes, aes(x = mean_pc, y = as.numeric(h_popUID))) +
geom_errorbar(aes(ymin = mean_pc - sd_pc, ymax = mean_pc + sd_pc))
haplotypes
haplotypes$h_popUID
haplotypes$h_popUID %>%  as.numeric
ggplot(data = haplotypes, aes(x = mean_pc, y = h_popUID  )) +
geom_errorbar(aes(ymin = mean_pc - sd_pc, ymax = mean_pc + sd_pc))
ggplot(data = haplotypes, aes(x = mean_pc, y = h_popUID  ))
ggplot(data = haplotypes, aes(x = mean_pc, y = h_popUID  )) +
geom_point() +
geom_errorbar(aes(
ymin = mean_pc - sd_pc,
ymax = mean_pc + sd_pc)
)
ggplot(data = haplotypes, aes(y = mean_pc, x = h_popUID  )) +
geom_point() +
geom_errorbar(aes(
ymin = mean_pc - sd_pc,
ymax = mean_pc + sd_pc)
)
ggplot(data = haplotypes, aes(y = mean_pc, x = h_popUID)) +
geom_point() +
geom_errorbar(aes(
ymin = mean_pc - sd_pc,
ymax = mean_pc + sd_pc)
) +
theme(axis.text.x = element_text(angle = 30))
ggplot(data = haplotypes, aes(y = mean_pc, x = h_popUID)) +
geom_point() +
geom_errorbar(aes(
ymin = mean_pc - sd_pc,
ymax = mean_pc + sd_pc)
) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = haplotypes, aes(y = mean_pc, x = h_popUID)) +
geom_point() +
geom_errorbar(aes(
ymin = mean_pc - sd_pc,
ymax = mean_pc + sd_pc)
) +
theme(axis.text.x = element_text(angle = 45, size = 1))
ggplot(data = haplotypes, aes(y = mean_pc, x = h_popUID)) +
geom_point() +
geom_errorbar(aes(
ymin = mean_pc - sd_pc,
ymax = mean_pc + sd_pc)
) +
theme(axis.text.x = element_text(angle = 45, size = 1.5))
ggplot(data = haplotypes, aes(y = mean_pc, x = h_popUID)) +
geom_point() +
geom_errorbar(aes(
ymin = mean_pc - sd_pc,
ymax = mean_pc + sd_pc)
) +
theme(axis.text.x = element_text(angle = 45, size = 10))
ggplot(data = haplotypes, aes(y = mean_pc, x = h_popUID)) +
geom_point() +
geom_errorbar(aes(
ymin = mean_pc - sd_pc,
ymax = mean_pc + sd_pc)
) +
theme(axis.text.x = element_text(angle = 45, size = 8))
library(tidyverse)
setwd('~/bin/visuals/WGS/combinations/')
mapq <- read_tsv("mapQ.tab")
baseq <- read_tsv("insilico_baseq.tab")
mapq <- read_tsv("mapQ.tab")
mapq
ggplot(baseq %>%  filter(quality > 20), aes(x = quality, y = count, colour = interaction(s1, s2))) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap(ext~pdensity)
ggplot(mapq, aes(x = quality, y = count)) +
geom_bar(stat='identity')
baseq <- read_tsv("insilico_baseq.tab")
ggplot(mapq, aes(x = quality, y = count)) +
geom_bar(stat='identity')
mapq <- read_tsv("mapQ.tab")
mapq <- read_tsv("insilico_mapQ.tab")
ggplot(mapq, aes(x = quality, y = count)) +
geom_bar(stat='identity')
ggplot(mapq, aes(x = quality, y = count, colour = interaction(ext, s1, s2))) +
geom_bar(stat='identity')
ggplot(mapq, aes(x = quality, y = count, colour = interaction(ext, s1, s2))) +
geom_bar(stat='identity') +
facet_wrap(ext~s1~s2)
ggplot(mapq, aes(x = quality, y = count, colour = interaction(ext, s1, s2))) +
geom_bar(stat='identity') +
facet_wrap(ext~s1~s2~density)
ggplot(mapq, aes(x = quality, y = count, colour = interaction(ext, s1, s2))) +
geom_bar(stat='identity') +
facet_wrap(ext~s1~s2~density, scales = 'free')
ggplot(mapq, aes(x = quality, y = count, colour = interaction(ext, s1, s2))) +
geom_bar(stat='identity') +
facet_wrap(ext~s1~s2~density, scales = 'free')
ggplot(mapq, aes(x = quality, y = count, colour = density)) +
geom_bar(stat='identity', position = 'dodge') +
facet_wrap(ext~s1~s2, scales = 'free')
mapq$quality %>%  hist()
mapq$count %>%  hist()
ggplot(mapq, aes(x = quality, y = log10(count), colour = density)) +
geom_bar(stat='identity', position = 'dodge') +
facet_wrap(ext~s1~s2, scales = 'free')
