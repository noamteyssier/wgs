rpm <- coverage %>%
mutate(proportion = depth / totalReads) %>%
mutate(rpm = proportion * 1000000) %>%
mutate(zed = ifelse(rpm == 0, T, F)) %>%
mutate(shapeSize = ifelse(isTRUE(zed), 10, 0.1))
rpm
# reorder windows alphanumerically
rpm$window <- factor(rpm$window, levels = mixedsort(unique(rpm$window)))
rpm$flashBool <- factor(rpm$flashBool, labels = c('no_FLASH', 'FLASH'))
rpm$snpBool <- factor(rpm$snpBool, labels = c("Any Coverage of Window", "Usable For Haplotyping"))
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
# geom_boxplot() +
# geom_beeswarm(aes(shape = zed, size = shapeSize))+
geom_point(alpha = 0.5, aes(shape = zed, size = shapeSize)) +
facet_grid(~snpBool) +
theme(strip.placement = 'outside',
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000))
g
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
# geom_boxplot() +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
# geom_point(alpha = 0.5, aes(shape = zed, size = shapeSize)) +
facet_grid(~snpBool) +
theme(strip.placement = 'outside',
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000))
g
# calculate proportion of total reads at window and make reads per million
rpm <- coverage %>%
mutate(proportion = depth / totalReads) %>%
mutate(rpm = proportion * 1000000) %>%
mutate(zed = ifelse(rpm == 0, T, F)) %>%
mutate(shapeSize = ifelse(isTRUE(zed), 3, 1))
rpm
rpm %>%
filter(shapeSize != 1)
rpm %>%
filter(shapeSize != 1)
rpm$zed
rpm$shapeSize
# calculate proportion of total reads at window and make reads per million
rpm <- coverage %>%
mutate(proportion = depth / totalReads) %>%
mutate(rpm = proportion * 1000000) %>%
mutate(zed = ifelse(rpm == 0, TRUE, FALSE)) %>%
mutate(shapeSize = ifelse(isTRUE(zed), 3, 1))
rpm$shapeSize
rpm$zed
rpm$shapeSize
# calculate proportion of total reads at window and make reads per million
rpm <- coverage %>%
mutate(proportion = depth / totalReads) %>%
mutate(rpm = proportion * 1000000) %>%
mutate(zed = ifelse(rpm == 0, 0, 1)) %>%
mutate(shapeSize = ifelse(zed == 0, 3, 0.1))
rpm$shapeSize
rpm$zed
# reorder windows alphanumerically
rpm$window <- factor(rpm$window, levels = mixedsort(unique(rpm$window)))
rpm$flashBool <- factor(rpm$flashBool, labels = c('no_FLASH', 'FLASH'))
rpm$snpBool <- factor(rpm$snpBool, labels = c("Any Coverage of Window", "Usable For Haplotyping"))
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
# geom_boxplot() +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
# geom_point(alpha = 0.5, aes(shape = zed, size = shapeSize)) +
facet_grid(~snpBool) +
theme(strip.placement = 'outside',
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000))
g
# calculate proportion of total reads at window and make reads per million
rpm <- coverage %>%
mutate(proportion = depth / totalReads) %>%
mutate(rpm = proportion * 1000000) %>%
mutate(zed = ifelse(rpm == 0, 0, 1)) %>%
mutate(shapeSize = ifelse(zed == 0, 3, 1))
rpm$shapeSize
rpm$zed
# reorder windows alphanumerically
rpm$window <- factor(rpm$window, levels = mixedsort(unique(rpm$window)))
rpm$flashBool <- factor(rpm$flashBool, labels = c('no_FLASH', 'FLASH'))
rpm$snpBool <- factor(rpm$snpBool, labels = c("Any Coverage of Window", "Usable For Haplotyping"))
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
# geom_boxplot() +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
# geom_point(alpha = 0.5, aes(shape = zed, size = shapeSize)) +
facet_grid(~snpBool) +
theme(strip.placement = 'outside',
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000))
g
# calculate proportion of total reads at window and make reads per million
rpm <- coverage %>%
mutate(proportion = depth / totalReads) %>%
mutate(rpm = proportion * 1000000) %>%
mutate(zed = ifelse(rpm == 0, TRUE, FALSE)) %>%
mutate(shapeSize = ifelse(isTRUE(zed), 'y', 'n'))
rpm$shapeSize
rpm$zed
rpm$shapeSize
# calculate proportion of total reads at window and make reads per million
rpm <- coverage %>%
mutate(proportion = depth / totalReads) %>%
mutate(rpm = proportion * 1000000) %>%
mutate(zed = ifelse(rpm == 0, TRUE, FALSE)) %>%
mutate(shapeSize = ifelse(zed == 1, 'y', 'n'))
rpm$shapeSize
rpm$zed
# calculate proportion of total reads at window and make reads per million
rpm <- coverage %>%
mutate(proportion = depth / totalReads) %>%
mutate(rpm = proportion * 1000000) %>%
mutate(zed = ifelse(rpm == 0, TRUE, FALSE)) %>%
mutate(shapeSize = ifelse(zed == 1, 3, 1))
rpm$shapeSize
rpm$zed
# reorder windows alphanumerically
rpm$window <- factor(rpm$window, levels = mixedsort(unique(rpm$window)))
rpm$flashBool <- factor(rpm$flashBool, labels = c('no_FLASH', 'FLASH'))
rpm$snpBool <- factor(rpm$snpBool, labels = c("Any Coverage of Window", "Usable For Haplotyping"))
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
# geom_boxplot() +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
# geom_point(alpha = 0.5, aes(shape = zed, size = shapeSize)) +
facet_grid(~snpBool) +
theme(strip.placement = 'outside',
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000))
g
# calculate proportion of total reads at window and make reads per million
rpm <- coverage %>%
mutate(proportion = depth / totalReads) %>%
mutate(rpm = proportion * 1000000) %>%
mutate(zed = ifelse(rpm == 0, TRUE, FALSE)) %>%
mutate(shapeSize = ifelse(zed == 1, 2, 1))
rpm$shapeSize
rpm$zed
# reorder windows alphanumerically
rpm$window <- factor(rpm$window, levels = mixedsort(unique(rpm$window)))
rpm$flashBool <- factor(rpm$flashBool, labels = c('no_FLASH', 'FLASH'))
rpm$snpBool <- factor(rpm$snpBool, labels = c("Any Coverage of Window", "Usable For Haplotyping"))
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
facet_grid(~snpBool) +
theme(strip.placement = 'outside',
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000))
g
# calculate proportion of total reads at window and make reads per million
rpm <- coverage %>%
mutate(proportion = depth / totalReads) %>%
mutate(rpm = proportion * 1000000) %>%
mutate(zed = ifelse(rpm == 0, TRUE, FALSE)) %>%
mutate(shapeSize = ifelse(zed == 1, 1.5, 1))
rpm$shapeSize
rpm$zed
# reorder windows alphanumerically
rpm$window <- factor(rpm$window, levels = mixedsort(unique(rpm$window)))
rpm$flashBool <- factor(rpm$flashBool, labels = c('no_FLASH', 'FLASH'))
rpm$snpBool <- factor(rpm$snpBool, labels = c("Any Coverage of Window", "Usable For Haplotyping"))
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
facet_grid(~snpBool) +
theme(strip.placement = 'outside',
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000))
g
ggsave(paste(path, "coverageEnrichment.pdf", sep=''), g)
# calculate proportion of total reads at window and make reads per million
rpm <- coverage %>%
mutate(proportion = depth / totalReads) %>%
mutate(rpm = proportion * 1000000) %>%
mutate(zed = ifelse(rpm == 0, TRUE, FALSE)) %>%
mutate(shapeSize = ifelse(zed == 1, 1, 0.5))
rpm$shapeSize
rpm$zed
# reorder windows alphanumerically
rpm$window <- factor(rpm$window, levels = mixedsort(unique(rpm$window)))
rpm$flashBool <- factor(rpm$flashBool, labels = c('no_FLASH', 'FLASH'))
rpm$snpBool <- factor(rpm$snpBool, labels = c("Any Coverage of Window", "Usable For Haplotyping"))
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
facet_grid(~snpBool) +
theme(strip.placement = 'outside',
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000))
g
## load data
path = "~/projects/visuals/enrichment/"
enrichment <- read_tsv(paste(path,"enrichment.tab", sep=''))
totalReads <- read_tsv(paste(path,"totalReads.tab", sep=''))
# join on sample and snpBool
coverage <- left_join(enrichment, totalReads, by=c('sample', 'snpBool'))
# calculate proportion of total reads at window and make reads per million
rpm <- coverage %>%
mutate(proportion = depth / totalReads) %>%
mutate(rpm = proportion * 1000000) %>%
mutate(zed = ifelse(rpm == 0, TRUE, FALSE)) %>%
mutate(shapeSize = ifelse(zed == 1, 1, 0.5))
rpm$shapeSize
rpm$zed
# reorder windows alphanumerically
rpm$window <- factor(rpm$window, levels = mixedsort(unique(rpm$window)))
rpm$flashBool <- factor(rpm$flashBool, labels = c('no_FLASH', 'FLASH'))
rpm$snpBool <- factor(rpm$snpBool, labels = c("Any Coverage of Window", "Usable For Haplotyping"))
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
facet_grid(~snpBool) +
theme(strip.placement = 'outside',
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000))
g
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
facet_grid(~snpBool) +
theme(strip.placement = 'outside',
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000)) +
guides(shape = F, size = F)
g
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
facet_grid(~snpBool) +
theme(strip.placement = 'outside', panel.grid.minor = element_line(colour="grey", size = 0.5),
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000)) +
guides(shape = F, size = F)
g
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
facet_grid(~snpBool) +
theme(strip.placement = 'outside', panel.grid.major = element_line(colour="grey", size = 0.5),
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000)) +
guides(shape = F, size = F)
g
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
facet_grid(~snpBool) +
theme(strip.placement = 'outside', panel.grid.major = element_line(colour="grey", size = 0.2),
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000)) +
guides(shape = F, size = F)
g
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
facet_grid(~snpBool) +
theme(strip.placement = 'outside', panel.grid.major.x = element_line(colour="grey", size = 0.2),
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000)) +
guides(shape = F, size = F)
g
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
facet_grid(~snpBool) +
theme(strip.placement = 'outside', panel.grid.major.x = element_line(colour="grey", size = 0.2),
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000)) +
guides(shape = F, size = F)
g
ggsave(paste(path, "coverageEnrichment.pdf", sep=''), g)
library(tidyverse)
library(ggplot2)
library(wesanderson)
library(ggbeeswarm)
setwd("~/projects/visuals/wgs_HeOME")
raw <- read_tsv("xV_HeOME.tab")
chromLengths <- read_tsv("chromLengths.tab")
meta <- read_tsv("xV_meta.tab")
heome <- left_join(raw, meta, by = 'sample') %>%
arrange(sample, depth) %>%
filter(sWGA == 'yes') %>%
mutate(window = paste(chrom, start, end, direction, sep = '.'))
## calculate median depth at each window
medianDepth <- heome %>%
group_by(window, totalCoverage) %>%
mutate(med = median(depth))
## calculate the number of samples each window is found at
windowCoverage <- heome %>%
group_by(window, totalCoverage) %>%
filter(depth > 5) %>% # with a depth greater than 5
count()
## determine which windows perform poorly in all 6 samples
poor_windows <- heome %>%
filter(depth < 10) %>%
group_by(window, totalCoverage) %>%
add_count() %>%
filter(n == 6)
length((poor_windows %>% filter(totalCoverage == 0))$window) # 25 windows fall out on each sample
## calculate log10 variance of each window
windowVar <- heome %>%
group_by(window, totalCoverage) %>%
mutate(v = var(depth), m = mean(depth)) %>%
mutate(dev = v - m)
## mean of all window variance
empSD <- windowVar$ls %>% mean(na.rm = T)
## Quantiles
quantile((medianDepth %>% filter(totalCoverage == 0))$med, probs = seq(0.1,.9, .1)) # quantiles for each window w/o total coverage
quantile((medianDepth %>% filter(totalCoverage == 1))$med, probs = seq(0.1,.9, .1)) # quantiles for each window w/ total coverage
## Histograms
hist(log10((medianDepth %>% filter(totalCoverage == 0))$med))  # median depth of each window
hist(log10((medianDepth %>% filter(totalCoverage == 1))$med))  # median depth of each window with totalCoverage
library(tidyverse)
library(ggplot2)
library(ggbeeswarm)
library(gtools)
library(wesanderson)
## load data
path = "~/projects/visuals/enrichment/"
enrichment <- read_tsv(paste(path,"enrichment.tab", sep=''))
totalReads <- read_tsv(paste(path,"totalReads.tab", sep=''))
# join on sample and snpBool
coverage <- left_join(enrichment, totalReads, by=c('sample', 'snpBool'))
# calculate proportion of total reads at window and make reads per million
rpm <- coverage %>%
mutate(proportion = depth / totalReads) %>%
mutate(rpm = proportion * 1000000) %>%
mutate(zed = ifelse(rpm == 0, TRUE, FALSE)) %>%
mutate(shapeSize = ifelse(zed == 1, 1, 0.5))
rpm$shapeSize
rpm$zed
# reorder windows alphanumerically
rpm$window <- factor(rpm$window, levels = mixedsort(unique(rpm$window)))
rpm$flashBool <- factor(rpm$flashBool, labels = c('no_FLASH', 'FLASH'))
rpm$snpBool <- factor(rpm$snpBool, labels = c("Any Coverage of Window", "Usable For Haplotyping"))
g <- ggplot(data = rpm, aes(x = window, y = rpm, color = flashBool)) +
geom_beeswarm(aes(shape = zed, size = shapeSize))+
facet_grid(~snpBool) +
theme(strip.placement = 'outside', panel.grid.major.x = element_line(colour="grey", size = 0.2),
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 5, angle = 90, hjust = 1, vjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_color_manual(values = wes_palette(n=2, name = "Moonrise2")) +
labs(y = "Reads Per Million", x = "Window Name")+
scale_y_log10(breaks = c(1,100,10000)) +
guides(shape = F, size = F)
g
library(tidyverse)
library(ggplot2)
library(wesanderson)
library(ggbeeswarm)
path = "~/projects/visuals/tripleStrainBoxplots"
tripleStrains <- read_tsv(paste(path, "tripleStrainHaplo.tab", sep = '/'))
strainCombinations <- read_tsv(paste(path, 'sampleCombination.tab', sep='/'))
# load expected strains and filter only those found in TS[2,5,6]
expectedStrains <- read_tsv(paste(path, 'expected.tab', sep = '/')) %>%
filter(grepl('HB3|U659|D10', strain))
# filter out low counting windows and remove MS
tripleStrains <- left_join(tripleStrains, strainCombinations, by = 'sample') %>%
filter(!is.na(strainCombination)) %>%
filter(count > 100) %>%
filter(!grepl('MS', window))
# match haplotype strings with expected strings from strains
matchedStrains <- left_join(tripleStrains, expectedStrains, by = c('window', 'haplotype_string'))
# collapse identical haplotype_string strain names
catStrains <- matchedStrains %>%
group_by(sample, window, haplotype_string) %>%
summarise(strain = paste(strain, collapse = '_'))
## only keep windows that are completely differentiated
diffWindows <- left_join(matchedStrains, catStrains, by = c('sample','window','haplotype_string')) %>%
filter(!grepl('_', strain.y)) %>%
filter(!is.na(strain.x)) %>%
group_by(sample, window) %>%
add_count() %>%
filter(n > 1)
## Plotting
g <- ggplot(data = diffWindows, aes(x = strain.x, y = percentage)) +
geom_boxplot(width = 0.8, alpha = 0.6, coef= 0, outlier.size = 0,
aes(fill = as.factor(rep))) +
geom_point(position = position_dodge(width = 0.9), size = 0.7,
aes(alpha = 0.4, fill = as.factor(rep))) +
facet_wrap(~strainCombination) +
theme(strip.placement = 'outside',
panel.background = element_rect(fill = 'white'),
axis.text.x = element_text(size = 11),
panel.border = element_rect(colour = "black", fill=NA, size=0.25)) +
scale_fill_manual(values = wes_palette(n=3, name = "Moonrise2"),
guide = guide_legend(title = "Replicate")) +
labs(y = "Percentage", x = "Strain")
g
library(tidyverse)
library(ggplot2)
library(wesanderson)
library(ggbeeswarm)
setwd("~/projects/visuals/wgs_HeOME")
raw <- read_tsv("xV_HeOME.tab")
chromLengths <- read_tsv("chromLengths.tab")
meta <- read_tsv("xV_meta.tab")
heome <- left_join(raw, meta, by = 'sample') %>%
arrange(sample, depth) %>%
filter(sWGA == 'yes') %>%
mutate(window = paste(chrom, start, end, direction, sep = '.'))
## calculate median depth at each window
medianDepth <- heome %>%
group_by(window, totalCoverage) %>%
mutate(med = median(depth))
## calculate the number of samples each window is found at
windowCoverage <- heome %>%
group_by(window, totalCoverage) %>%
filter(depth > 5) %>% # with a depth greater than 5
count()
## determine which windows perform poorly in all 6 samples
poor_windows <- heome %>%
filter(depth < 10) %>%
group_by(window, totalCoverage) %>%
add_count() %>%
filter(n == 6)
length((poor_windows %>% filter(totalCoverage == 0))$window) # 25 windows fall out on each sample
## calculate log10 variance of each window
windowVar <- heome %>%
group_by(window, totalCoverage) %>%
mutate(v = var(depth), m = mean(depth)) %>%
mutate(dev = v - m)
## mean of all window variance
empSD <- windowVar$ls %>% mean(na.rm = T)
## Quantiles
quantile((medianDepth %>% filter(totalCoverage == 0))$med, probs = seq(0.1,.9, .1)) # quantiles for each window w/o total coverage
quantile((medianDepth %>% filter(totalCoverage == 1))$med, probs = seq(0.1,.9, .1)) # quantiles for each window w/ total coverage
## Histograms
hist(log10((medianDepth %>% filter(totalCoverage == 0))$med))  # median depth of each window
hist(log10((medianDepth %>% filter(totalCoverage == 1))$med))  # median depth of each window with totalCoverage
## chromosomal visualization
ggplot(data = chromLengths %>% arrange(chrom), aes(x = chrom, y = length)) +
geom_bar(stat = 'identity', width = 0.05) +
geom_point(data = heome,
aes(x = chrom, y = start,
size = depth, color = depth), alpha = 0.5) +
coord_flip()  +
scale_color_gradient(low = 'blue', high = 'firebrick4') +
theme_classic()
## Quantiles
quantile((medianDepth %>% filter(totalCoverage == 0))$med, probs = seq(0.1,.9, .1)) # quantiles for each window w/o total coverage
quantile((medianDepth %>% filter(totalCoverage == 1))$med, probs = seq(0.1,.9, .1)) # quantiles for each window w/ total coverage
## Histograms
hist(log10((medianDepth %>% filter(totalCoverage == 0))$med))  # median depth of each window
hist(log10((medianDepth %>% filter(totalCoverage == 1))$med))  # median depth of each window with totalCoverage
## Histograms
h1 <- hist(log10((medianDepth %>% filter(totalCoverage == 0))$med))  # median depth of each window
h2 <- hist(log10((medianDepth %>% filter(totalCoverage == 1))$med))  # median depth of each window with totalCoverage
ggsave("medianDepth.pdf", h1)
save("medianDepth.pdf", h1)
## Histograms
h1 <- hist(log10((medianDepth %>% filter(totalCoverage == 0))$med))  # median depth of each window
h2 <- hist(log10((medianDepth %>% filter(totalCoverage == 1))$med))  # median depth of each window with totalCoverage
save("medianDepth.pdf", h1)
## Histograms
hist(log10((medianDepth %>% filter(totalCoverage == 0))$med))  # median depth of each window
hist(log10((medianDepth %>% filter(totalCoverage == 1))$med))  # median depth of each window with totalCoverage
## Quantiles
quantile((medianDepth %>% filter(totalCoverage == 0))$med, probs = seq(0.1,.9, .1)) # quantiles for each window w/o total coverage
quantile((medianDepth %>% filter(totalCoverage == 1))$med, probs = seq(0.1,.9, .1)) # quantiles for each window w/ total coverage
